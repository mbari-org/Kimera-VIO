FROM ubuntu:18.04
ENV DEBIAN_FRONTEND noninteractive

ENV DIRPATH /root
WORKDIR ${DIRPATH}

RUN apt-get update -y && \
    apt-get install -y --no-install-recommends \
        apt-utils \
        git cmake build-essential pkg-config \
        xvfb \
        unzip \
        libjpeg-dev libpng-dev libtiff-dev \
        libvtk6-dev \
        libgtk-3-dev \
        libatlas-base-dev gfortran \
        libboost-all-dev libtbb-dev \
        libgflags2.2 libgflags-dev libgoogle-glog0v5 libgoogle-glog-dev \
        ca-certificates \
        ffmpeg \
        libglew-dev && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

ARG CMAKE_INSTALL_PREFIX=/usr/local
ARG NUM_THREADS=1

# Clone OpenCV @ tags/3.3.1
RUN git clone https://github.com/opencv/opencv.git && \
    cd opencv && \
    git checkout tags/3.3.1

# Clone OpenCV contrib @ tags/3.3.1
RUN git clone https://github.com/opencv/opencv_contrib.git && \
    cd opencv_contrib && \
    git checkout tags/3.3.1

# Build and install OpenCV
RUN cd opencv && \
    mkdir build && \
    cd build && \
    cmake \
        -D CMAKE_INSTALL_PREFIX=$CMAKE_INSTALL_PREFIX \
        -D CMAKE_BUILD_TYPE=Release \
        -D OPENCV_EXTRA_MODULES_PATH=${DIRPATH}/opencv_contrib/modules \
        -D BUILD_opencv_python=OFF \
        -D BUILD_opencv_python2=OFF \
        -D BUILD_opencv_python3=OFF \
        -D WITH_TBB=ON \
        .. && \
    make -j${NUM_THREADS} install && \
    cd ${DIRPATH} && rm -rf opencv && rm -rf opencv_contrib

# Clone GTSAM @ tags/4.1.1
RUN git clone https://github.com/borglab/gtsam.git && \
    cd gtsam && \
    git checkout tags/4.1.1

# Build and install GTSAM
RUN cd gtsam && \
    mkdir build && \
    cd build && \
    cmake \
        -D CMAKE_INSTALL_PREFIX=$CMAKE_INSTALL_PREFIX \
        -D CMAKE_BUILD_TYPE=Release \
        -D GTSAM_BUILD_TESTS=OFF \
        -D GTSAM_BUILD_EXAMPLES_ALWAYS=OFF \
        -DGTSAM_BUILD_UNSTABLE=ON \
        -DGTSAM_POSE3_EXPMAP=ON \
        -DGTSAM_ROT3_EXPMAP=ON \
        -DGTSAM_TANGENT_PREINTEGRATION=OFF \
        .. && \
    make -j${NUM_THREADS} install && \
    cd ${DIRPATH} && rm -rf gtsam/build
# Leave GTSAM repo, since OpenGV needs its Eigen

# Clone OpenGV @ 91f4b19c73450833a40e463ad3648aae80b3a7f3
RUN git clone https://github.com/laurentkneip/opengv.git && \
    cd opengv && \
    git checkout 91f4b19c73450833a40e463ad3648aae80b3a7f3

# Build and install OpenGV
RUN cd opengv && \
    mkdir build && \
    cd build && \
    cmake \
        -D CMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} \
        -D CMAKE_BUILD_TYPE=Release \
        -D EIGEN_INCLUDE_DIRS=${DIRPATH}/gtsam/gtsam/3rdparty/Eigen \
        -D EIGEN_INCLUDE_DIR=${DIRPATH}/gtsam/gtsam/3rdparty/Eigen .. && \
    make -j${NUM_THREADS} install && \
    cd ${DIRPATH} && rm -rf opengv

# Clone DBow2 @ 3924753db6145f12618e7de09b7e6b258db93c6e
RUN git clone https://github.com/dorian3d/DBoW2.git && \
    cd DBoW2 && \
    git checkout 3924753db6145f12618e7de09b7e6b258db93c6e

# Build and install DBoW2
RUN cd DBoW2 && \
    mkdir build && \
    cd build && \
    cmake \
        -D CMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} \
        -D CMAKE_BUILD_TYPE=Release \
        .. && \
    make -j${NUM_THREADS} install && \
    cd ${DIRPATH} && rm -rf DBoW2

# Clone Kimera-RPGO @ 19436dcf7e77ca60b30f96a0e7b1ca3a5408ca0e
RUN git clone https://github.com/MIT-SPARK/Kimera-RPGO.git && \
    cd Kimera-RPGO && \
    git checkout 19436dcf7e77ca60b30f96a0e7b1ca3a5408ca0e

# Build Kimera-RPGO
RUN cd Kimera-RPGO && \
    mkdir build && \
    cd build && \
    cmake \
        -D CMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} \
        -D CMAKE_BUILD_TYPE=Release \
        .. && \
    make -j${NUM_THREADS} install && \
    cd ${DIRPATH}
# Leave Kimera-RPGO repo too

# Clone Pangolin @ tags/v0.8
RUN git clone https://github.com/stevenlovegrove/Pangolin.git && \
    cd Pangolin && \
    git checkout tags/v0.8

# Build and install Pangolin
RUN cd Pangolin && \
    mkdir build && \
    cd build && \
    cmake \
        -D CMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} \
        -D CMAKE_BUILD_TYPE=Release \
        .. && \
    make -j${NUM_THREADS} install && \
    cd ${DIRPATH} && rm -rf Pangolin && ldconfig

# Add current directory
ADD . ${DIRPATH}/Kimera-VIO

# Build Kimera-VIO
RUN cd Kimera-VIO && \
    mkdir build && \
    cd build && \
    cmake .. && \
    make -j${NUM_THREADS}

# Set default command to bash
CMD ["/bin/bash"]
